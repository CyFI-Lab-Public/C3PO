#!/bin/sh

#TODO: add options for QEMU and HW
# QEMU: ECG_Data.txt is in /home/root; HW: ECG_Data.txt is in /mnt/SD

#TODO: add options for capturing malware or heartrate data
# Malware: print maps file for pid_m, use pid_m as arg to callpcm; heartrate: print maps file
# for pid_b, use pid_b as arg to callpcm

PCM_ID="[HWROT PCM]"

log_file="memcap.log"
ecg_file="/mnt/SD/ECG_Data.txt"

cleanup () {
	rc=$1

	chmod o+w "$log_file"
	
	unloadmodule
	wait
	
	if [ $? -ne 0 ]; then
        	echo "Failed to remove the kernel module."
	       rc=-5
	fi
	
	exec 1>&3
	
	if [ $rc -ne 0 ]; then
		echo "Running this project failed with error code $rc. Please check $log_file for errors."
	else
		echo -e "Run successful."
		echo "A log file can be found in $log_file"
	fi

	exit $rc
}

if [ $# -ne 1 ]; then
	echo "Please provide exactly one input parameter that specifies the number of memory captures to take. Exiting..."
	exit -100
fi

NUM_CAPTURES="$1"

touch "memcap.log"
chmod o+w memcap.log

# redirect stdout to log file, saving original stdout to &3
exec 3>&1
exec 1>"$log_file"

# Load the kernel module
loadmodule
wait
rc=$?

echo "Return value of loading the kernel module was $rc"

if [ $rc -ne 0 ]; then
	echo -e "\nFailed to insert kernel module." 
	exec 1>&3
	exit -2
fi

# Perform memory captures on timebomb and got-attack
# Run input generator and got attack programs
(/mnt/SD/binaries/gen-input-got-attack | /mnt/SD/binaries/got-attack &)

# Find PID of the got-attack program
ps -A | grep got-attack
pid_attack=`ps -A | grep got-attack | head -1 | cut -d' ' -f2`

# Find PID of the timebomb program
ps -A | grep timebomb
pid_timebomb=`ps -A | grep timebomb | head -1 | cut -d' ' -f2`

# Run the benign process
#(heartrate "$ecg_file" &)
#
# Find the PID of the benign process
#ps -A | grep heartrate
#pid_b=`ps -A | grep heartrate | head -1 | cut -d' ' -f2`
#
# Run the toy malware process
#mal_arg="1"
#(mysamplemalware "$mal_arg" "$pid_b" &) 
#
# Find the PID of the "malware" process
#echo "Finding PID of malware process..."
#ps -A | grep mysamplemalware
#pid_m=`ps -A | grep mysamplemalware | head -1 | cut -d' ' -f2`
#if [ -z "$pid_m" ]; then
#	echo -e "\nFailed to find PID of the 'malware' process. Exiting..." 
#	cleanup -5
#fi
#
#echo -e "\nMaps file output:\n"
#cat /proc/$pid_m/maps
#echo ""

for ((i=1;i<=NUM_CAPTURES;i++)); do
	mkdir "got_attack_$i"
	cd "got_attack_$i"

	# Run the userspace program that calls the kernel module and wait for it to exit
	callpcm "$pid_attack"
	wait

	# Change permissions on all output files
	if [ -e "lindbg.log" ]; then
		chmod o+w lindbg.log
	fi

	find . -name "*.dmp" -exec chmod o+w {} +

	cd ../

	sleep 6s

	mkdir "timebomb_$i"
	cd "timebomb_$i"

	# Find PID of the timebomb program
	ps -A | grep timebomb
	pid_timebomb=`ps -A | grep timebomb | head -1 | cut -d' ' -f2`

	callpcm "$pid_timebomb"
	wait

	echo -e "\n Kernel output:\n"
	dmesg | grep "$PCM_ID"
	echo ""

	# Change permissions on all output files
	if [ -e "lindbg.log" ]; then
		chmod o+w lindbg.log 
	fi

	find . -name "*.dmp" -exec chmod o+w {} +

	cd ../

	sleep 1s
done

cleanup 0
